{"version":3,"file":"static/js/116.615f5b08.chunk.js","mappings":"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","sources":["places/pages/PlaceForm.jsx","places/pages/UpdatePlace.jsx","shared/components/UIElemets/Card.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport { VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/utils/validators'\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport useForm from '../../shared/hooks/FormHook';\r\nimport LoadingSpinner from '../../shared/components/UIElemets/LoadingSpinner';\r\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\r\nimport './PlaceForm.css'\r\n\r\nfunction PlaceForm({ place, placeSubmit, updateMode, error, isLoading }) {\r\n  const [inputHandler, formState] = useForm(place)\r\n\r\n  function isPlaceEqualToStateForm() {\r\n    let result = true;\r\n    for (const key in formState.inputs) {\r\n      if (formState.inputs[key].value !== place.inputs[key].value) result = false\r\n    }\r\n    return result\r\n  }\r\n\r\n  // const inputHandler = useCallback((id, value, isValid) => {\r\n  //   dispatch({\r\n  //     type: 'INPUT_CHANGE',\r\n  //     value: value,\r\n  //     isValid: isValid,\r\n  //     inputId: id\r\n  //   })\r\n  // }, [dispatch])\r\n\r\n  function placeSubmitLocal(e) {\r\n    e.preventDefault()\r\n    placeSubmit(formState);\r\n  }\r\n\r\n  return (\r\n    <form className='place-form' onSubmit={placeSubmitLocal}>\r\n      <Input\r\n        id='title'\r\n        type='text'\r\n        label='Title'\r\n        element='input'\r\n        validators={[VALIDATOR_REQUIRE()]}\r\n        errorText='Please enter a valid title'\r\n        onInput={inputHandler}\r\n        initValue={place?.inputs.title.value}\r\n      />\r\n      <Input\r\n        id='description'\r\n        label='Description'\r\n        type='text'\r\n        validators={[VALIDATOR_MINLENGTH(5)]}\r\n        errorText='Please enter a valid descripition. (5 characters at least)'\r\n        onInput={inputHandler}\r\n        initValue={place?.inputs.description.value}\r\n      />\r\n      {!updateMode && <>\r\n        <Input\r\n          id='address'\r\n          label='Address'\r\n          type='text'\r\n          element='input'\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          errorText='Please enter a valid adress'\r\n          onInput={inputHandler}\r\n          initValue={place?.inputs.address.value}\r\n        />\r\n        <ImageUpload \r\n          id='image'\r\n          center\r\n          errorText\r\n          onInput={inputHandler}\r\n        />\r\n      </>\r\n      }\r\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n        <Button type='submit' disabled={(formState.isValid && place && isPlaceEqualToStateForm()) | !formState.isValid}>\r\n          {isLoading ?\r\n            <div className='center'>\r\n              <LoadingSpinner />\r\n            </div> :\r\n            updateMode ? 'Update' : 'Add Place'}\r\n        </Button>\r\n      </div>\r\n      {error && <span style={{ color: 'red' }}>{error}</span>}\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default PlaceForm","import React, { useState, useEffect, useContext } from 'react';\r\nimport PlaceForm from './PlaceForm';\r\nimport { useParams, useNavigate } from 'react-router-dom'\r\nimport Card from '../../shared/components/UIElemets/Card'\r\nimport { useHttpClient } from '../../shared/api/http-hook';\r\nimport LoadingSpinner from '../../shared/components/UIElemets/LoadingSpinner';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\n\r\nfunction UpdatePlace() {\r\n    const { placeId } = useParams()\r\n    const navigate = useNavigate()\r\n    const [loadedPlace, setLoadedPlace] = useState()\r\n    const { loggedInUser, token } = useContext(AuthContext)\r\n\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\r\n\r\n    useEffect(() => {\r\n        const fetchPlace = async () => {\r\n            try {\r\n                const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`\r\n                );\r\n                setLoadedPlace(responseData.place);\r\n            } catch (err) { }\r\n        };\r\n        fetchPlace();\r\n    }, []);\r\n\r\n    const placeSubmit = async (form) => {\r\n        try {\r\n            await sendRequest(\r\n                `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\r\n                'PATCH',\r\n                JSON.stringify({\r\n                    title: form.inputs.title.value,\r\n                    description: form.inputs.description.value\r\n                }),\r\n                {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            );\r\n            navigate('/' + loggedInUser.id + '/places', { replace: true });\r\n        } catch (err) { }\r\n    };\r\n\r\n    const placeFormated = {\r\n        inputs: {\r\n            title: {\r\n                value: loadedPlace?.title,\r\n                isValid: true,\r\n            },\r\n            description: {\r\n                value: loadedPlace?.description,\r\n                isValid: true,\r\n            },\r\n            address: {\r\n                value: loadedPlace?.address,\r\n                isValid: true,\r\n            },\r\n        },\r\n        isValid: true\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div className=\"center\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!loadedPlace && !error) {\r\n        return (\r\n            <div className=\"center\">\r\n                <Card>\r\n                    <h2>Could not find place!</h2>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (loadedPlace) return (\r\n        <PlaceForm\r\n            placeSubmit={placeSubmit}\r\n            place={placeFormated}\r\n            updateMode={true}\r\n            isLoading={isLoading}\r\n            error={error !== 'The user aborted a request.' && error}\r\n        />\r\n    )\r\n}\r\n\r\nexport default UpdatePlace","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n"],"names":["_ref","place","placeSubmit","updateMode","error","isLoading","_useForm","useForm","_useForm2","_slicedToArray","inputHandler","formState","_jsxs","className","onSubmit","e","preventDefault","children","_jsx","Input","id","type","label","element","validators","VALIDATOR_REQUIRE","errorText","onInput","initValue","inputs","title","value","VALIDATOR_MINLENGTH","description","_Fragment","address","ImageUpload","center","style","display","flexDirection","alignItems","Button","disabled","isValid","result","key","isPlaceEqualToStateForm","LoadingSpinner","color","placeId","useParams","navigate","useNavigate","_useState","useState","_useState2","loadedPlace","setLoadedPlace","_useContext","useContext","AuthContext","loggedInUser","token","_useHttpClient","useHttpClient","sendRequest","clearError","useEffect","fetchPlace","_asyncToGenerator","_regeneratorRuntime","mark","_callee","responseData","wrap","_context","prev","next","concat","process","sent","t0","stop","apply","arguments","_ref2","_callee2","form","_context2","JSON","stringify","Authorization","replace","_x","placeFormated","PlaceForm","Card","props"],"sourceRoot":""}